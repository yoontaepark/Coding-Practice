# 문제: LCS (백준 9251번)
# 한줄풀이: 두 수열을 가로 세로로 뿌린다음에 글자하나씩 추가하면서 비교, 대표적인 동적 프로그래밍 문제 (O(n^2))

# LCS(Longest Common Subsequence, 최장 공통 부분 수열)문제는 두 수열이 주어졌을 때, 모두의 부분 수열이 되는 수열 중 가장 긴 것을 찾는 문제이다.

# 예를 들어, ACAYKP와 CAPCAK의 LCS는 ACAK가 된다.

# 입력
# 첫째 줄과 둘째 줄에 두 문자열이 주어진다. 문자열은 알파벳 대문자로만 이루어져 있으며, 최대 1000글자로 이루어져 있다.

# 출력
# 첫째 줄에 입력으로 주어진 두 문자열의 LCS의 길이를 출력한다.

# 예제 입력 1 
# ACAYKP
# CAPCAK
# 예제 출력 1 
# 4


x = input()
y = input()

# x * y 행렬을 0으로 초기화, 이때 편의상 공집합인 라인을 한줄씩 넣어둔다. 
dp =[[0] * (len(y) + 1) for _ in range(len(x) + 1)]

# 공집합쪽은 비교할거 아니니까, 인덱스 1부터 보기 위해 루프 범위를 1 ~ len+1 로 지정
for i in range(1, len(x) + 1):
    for j in range(1, len(y) + 1):
        # 인덱스에 해당하는 값들이 같다면
        if x[i-1] == y[j-1]:
            # (1,1) 부터는 보면서 대각선 값 + 1
            dp[i][j] = dp[i-1][j-1] + 1
        # 아니라면 왼쪽꺼 혹은 위에꺼 중 큰 값
        else:
            dp[i][j] = max(dp[i][j-1], dp[i-1][j])

# 가장 마지막(끝) 값 출력
print(dp[len(x)][len(y)])