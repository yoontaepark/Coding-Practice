# 문제: 가장 높은 탑 쌓기 (백준 2655번)
# 한줄풀이: 동적 프로그래밍, LIS(가장 긴 증가하는 부분 수열 문제 유형, 시간복잡도 O(n^2))

# 밑면이 정사각형인 직육면체 벽돌들을 사용하여 탑을 쌓고자 한다. 탑은 벽돌을 한 개씩 아래에서 위로 쌓으면서 만들어 간다. 아래의 조건을 만족하면서 가장 높은 탑을 쌓을 수 있는 프로그램을 작성하시오.

# 벽돌은 회전시킬 수 없다. 즉, 옆면을 밑면으로 사용할 수 없다.
# 밑면의 넓이가 같은 벽돌은 없으며, 또한 무게가 같은 벽돌도 없다.
# 벽돌들의 높이는 같을 수도 있다.
# 탑을 쌓을 때 밑면이 좁은 벽돌 위에 밑면이 넓은 벽돌은 놓을 수 없다.
# 무게가 무거운 벽돌을 무게가 가벼운 벽돌 위에 놓을 수 없다.

# 입력
# 첫째 줄에는 입력될 벽돌의 수가 주어진다. 입력으로 주어지는 벽돌의 수는 최대 100개이다. 
# 둘째 줄부터는 각 줄에 한 개의 벽돌에 관한 정보인 벽돌 밑면의 넓이, 벽돌의 높이 그리고 무게가 차례대로 양의 정수로 주어진다. 
# 각 벽돌은 입력되는 순서대로 1부터 연속적인 번호를 가진다. 벽돌의 넓이, 높이 무게는 10,000보다 작거나 같은 자연수이다.

# 출력
# 탑을 쌓을 때 사용된 벽돌의 수를 빈칸없이 출력하고, 두 번째 줄부터는 탑의 가장 위 벽돌부터 가장 아래 벽돌까지 차례로 한 줄에 하나씩 벽돌 번호를 빈칸없이 출력한다.

# 예제 입력 1 
# 5
# 25 3 4
# 4 4 6
# 9 2 3
# 16 2 5
# 1 5 2

# 예제 출력 1 
# 3
# 5
# 3
# 1

n = int(input())
array = []

# (번호, 너비, 높이, 무게)를 쭉 튜플에 넣어둔다.
array.append((0,0,0,0))
for i in range(1, n+1):
    area, height, weight = map(int, input().split())
    array.append((i, area, height, weight))

# 무게를 기준으로 정렬
array.sort(key=lambda data: data[3])
# print(array)

# 벽돌을 쌓을때마다의 높이, 예를들어 dp[3] 이면 누적으로 세번째 벽돌을 쌓을때의 높이
# 즉, 예를들어 dp[3] = 세번째 벽돌 높이인 3만 쌓을래 , 1번 벽돌 높이 + 3번 벽돌 높이인 7로 할래, 아니면 2번 벽돌 높이(근데 이건 1+2 높이임) + 3번 벽돌 높이인 10으로 할래
dp = [0] * (n+1)

# 벽돌1부터 끝까지 넣었을 때 
for i in range(1, n+1):
    # 
    for j in range(0,i):
        # 현재 벽돌이 이전 벽돌보다 넓다면
        if array[i][1] > array[j][1]:
            # 1번 벽돌값을 기존꺼 + 넣을벽돌값으로 높이를 업데이트 해준다. (물론 비교는 해야함)
            dp[i] = max(dp[i], dp[j] + array[i][2])
            # print(i, j, ':', dp)


# 역추적
max_value = max(dp)
index = n
result = []

# 인덱스를 역순으로 내리면서 비교
while index != 0:
    # 해당 인덱스가 맥스값이면 결과값 리스트에 벽돌번호를 추가, 맥스값에서는 해당 벽돌번호에 해당하는 높이를 제거
    if max_value == dp[index]:
        result.append(array[index][0])
        max_value -= array[index][2]
    index -= 1

# 값을 역순으로 바꾸고 출력 
result.reverse()
print(len(result))
[print(i) for i in result]
