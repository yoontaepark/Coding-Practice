# 문제: 배낭 문제 (백준 12865번)
# 한줄풀이: 동적 프로그래밍 문제의 전형, 무게를 하나 넣을때마다 버틸수 있는 무게들에 대해 가치를 업데이트 한다. 
# 예를들어 버틸수 있는 무게가 9에 6짜리 하나 3짜리 하나를 넣는다고 하면, 6~8일때까지는 가치가 v(6) 일거고, 9부터는 가치가 v(6) + v(3)(이전 반복기준의) 임

# 이 문제는 아주 평범한 배낭에 관한 문제이다.

# 한 달 후면 국가의 부름을 받게 되는 준서는 여행을 가려고 한다. 세상과의 단절을 슬퍼하며 최대한 즐기기 위한 여행이기 때문에, 가지고 다닐 배낭 또한 최대한 가치 있게 싸려고 한다.

# 준서가 여행에 필요하다고 생각하는 N개의 물건이 있다. 각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 준서가 V만큼 즐길 수 있다. 
# 아직 행군을 해본 적이 없는 준서는 최대 K만큼의 무게만을 넣을 수 있는 배낭만 들고 다닐 수 있다. 
# 준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.

# 입력
# 첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 준서가 버틸 수 있는 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 
# 두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.

# 입력으로 주어지는 모든 수는 정수이다.

# 출력
# 한 줄에 배낭에 넣을 수 있는 물건들의 가치합의 최댓값을 출력한다.

# 예제 입력 1 
# 4 7
# 6 13
# 4 8
# 3 6
# 5 12
# 예제 출력 1 
# 14

# 물품의 수랑 버틸 수 있는 무게를 입력하고, 무게값들로 구성된 배열을 0으로 초기화해서 구성
n, k = map(int, input().split())
dp = [[0] * (k+1) for _ in range(n+1)]


for i in range(1, n+1):
    weight, value = map(int, input().split())
    for j in range(1, k+1):
        if j < weight:
            dp[i][j] = dp[i-1][j]
        else:
            dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight] + value)

print(dp[n][k])