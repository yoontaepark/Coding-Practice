# 문제: 카드 정렬하기(백준 1927번)
# 한줄 풀이: 힙, 그리디, 가장 작은 두개부터 묶어나가는게 가장 최소임

# 정렬된 두 묶음의 숫자 카드가 있다고 하자. 각 묶음의 카드의 수를 A, B라 하면 보통 두 묶음을 합쳐서 하나로 만드는 데에는 A+B 번의 비교를 해야 한다. 
# 이를테면, 20장의 숫자 카드 묶음과 30장의 숫자 카드 묶음을 합치려면 50번의 비교가 필요하다.

# 매우 많은 숫자 카드 묶음이 책상 위에 놓여 있다. 이들을 두 묶음씩 골라 서로 합쳐나간다면, 고르는 순서에 따라서 비교 횟수가 매우 달라진다. 
# 예를 들어 10장, 20장, 40장의 묶음이 있다면 10장과 20장을 합친 뒤, 합친 30장 묶음과 40장을 합친다면 (10 + 20) + (30 + 40) = 100번의 비교가 필요하다. 
# 그러나 10장과 40장을 합친 뒤, 합친 50장 묶음과 20장을 합친다면 (10 + 40) + (50 + 20) = 120 번의 비교가 필요하므로 덜 효율적인 방법이다.

# N개의 숫자 카드 묶음의 각각의 크기가 주어질 때, 최소한 몇 번의 비교가 필요한지를 구하는 프로그램을 작성하시오.

# 입력
# 첫째 줄에 N이 주어진다. (1 ≤ N ≤ 100,000) 이어서 N개의 줄에 걸쳐 숫자 카드 묶음의 각각의 크기가 주어진다. 숫자 카드 묶음의 크기는 1,000보다 작거나 같은 양의 정수이다.

# 출력
# 첫째 줄에 최소 비교 횟수를 출력한다.

# 예제 입력 1 
# 3
# 10
# 20
# 40

# 예제 출력 1 
# 100

import heapq

n = int(input())
heap = []

# 데이터를 쭉 힙에 넣는다
for _ in range(n):
    data = int(input())
    heapq.heappush(heap, data)

# 출력할 결과값 0으로 초기화 
result = 0

# 힙이 1개가 될때까지
while len(heap) != 1:
    # 두개를 순서대로 뺀다음에
    one = heapq.heappop(heap)
    two = heapq.heappop(heap)
    # 두개를 합치고 결과값에 넣는다
    sum_value = one + two
    result += sum_value
    # 그다음에 둘의 합을 다시 힙에 넣는다. 
    heapq.heappush(heap, sum_value)

print(result)
